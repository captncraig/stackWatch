<html>

<head>
    <script src="https://code.jquery.com/jquery-3.2.1.min.js"></script>
    <script>
        var pushButton;
        var isPushEnabled;
        window.addEventListener('load', function () {
            pushButton = document.querySelector('.js-push-button');
            pushButton.disabled = true;
            pushButton.addEventListener('click', function () {
                if (isPushEnabled) {
                    unsubscribe();
                } else {
                    subscribe();
                }
            });
            if ('serviceWorker' in navigator) {
                navigator.serviceWorker.register('service-worker.js')
                    .then(initialiseState);
            } else {
                console.warn('Service workers aren\'t supported in this browser.');
            }
        });
        function initialiseState() {
            if (!('showNotification' in ServiceWorkerRegistration.prototype)) {
                console.warn('Notifications aren\'t supported.');
                return;
            }
            if (Notification.permission === 'denied') {
                console.warn('The user has blocked notifications.');
                return;
            }
            if (!('PushManager' in window)) {
                console.warn('Push messaging isn\'t supported.');
                return;
            }
            navigator.serviceWorker.ready.then(function (registration) {
                registration.pushManager.getSubscription()
                    .then(function (subscription) {
                        pushButton.disabled = false;
                        if (!subscription) {
                            console.log("NO SUB")
                            return;
                        }
                        isPushEnabled = true;
                        pushButton.textContent = 'Disable Push Messages';
                        pushButton.disabled = false;
                        console.log(subscription)
                    })
                    .catch(function (err) {
                        console.warn('Error during getSubscription()', err);
                    });
            });
        }
        function subscribe() {
            pushButton.disabled = true;

            navigator.serviceWorker.ready.then(function (registration) {
                const subscribeOptions = {
                    userVisibleOnly: true,
                    applicationServerKey: urlBase64ToUint8Array(
                        '{{{pub}}}'
                    )
                };
                registration.pushManager.subscribe(subscribeOptions)
                    .then(function (subscription) {
                        isPushEnabled = true;
                        pushButton.textContent = 'Disable Push Messages';
                        pushButton.disabled = false;
                        addSub(subscription)
                        return
                    })
                    .catch(function (e) {
                        if (Notification.permission === 'denied') {
                            console.warn('Permission for Notifications was denied');
                            pushButton.disabled = true;
                        } else {
                            console.error('Unable to subscribe to push.', e);
                            pushButton.disabled = false;
                            pushButton.textContent = 'Enable Push Messages';
                        }
                    });
            });
        }
        function unsubscribe() {
            var pushButton = document.querySelector('.js-push-button');
            pushButton.disabled = true;

            navigator.serviceWorker.ready.then(function (serviceWorkerRegistration) {
                serviceWorkerRegistration.pushManager.getSubscription().then(
                    function (pushSubscription) {
                        if (!pushSubscription) {
                            isPushEnabled = false;
                            pushButton.disabled = false;
                            pushButton.textContent = 'Enable Push Messages';
                            return;
                        }
                        var subscriptionId = pushSubscription.subscriptionId;
                        removeSub(pushSubscription)
                        pushSubscription.unsubscribe().then(function (successful) {
                            pushButton.disabled = false;
                            pushButton.textContent = 'Enable Push Messages';
                            isPushEnabled = false;
                        }).catch(function (e) {
                            removeSub(pushSubscription)
                            console.log('Unsubscription error: ', e);
                            pushButton.disabled = false;
                            pushButton.textContent = 'Enable Push Messages';
                        });
                    }).catch(function (e) {
                        console.error('Error thrown while unsubscribing from push messaging.', e);
                    });
            });
        }
        function urlBase64ToUint8Array(base64String) {
            const padding = '='.repeat((4 - base64String.length % 4) % 4);
            const base64 = (base64String + padding)
                .replace(/\-/g, '+')
                .replace(/_/g, '/');

            const rawData = window.atob(base64);
            const outputArray = new Uint8Array(rawData.length);

            for (let i = 0; i < rawData.length; ++i) {
                outputArray[i] = rawData.charCodeAt(i);
            }
            return outputArray;
        }
        function addSub(sub) {
            return fetch('/sub', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(sub)
            })
        }
        function removeSub(sub) {
            return fetch('/unsub', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(sub)
            })
        }
    </script>
</head>

<body>
    <h1>Stack Watcher</h1>
    <p>Listening to {{{site}}} (ID {{{site_id}}})</p>
    <p>Tags: {{{tags}}}</p>
    <button class='js-push-button'>Enable Push Messages</button>
    <hr/>
    <a href="{{{site}}}/questions/tagged/{{{tags}}}?mode=any"  target="_blank">Direct link to filtered search</a>
    <hr/>
    <h2> FAQ </h2>
    <h3>What is this?</h3>
    A very simple node app that listens to <a href="">Stack Exchange Web Sockets</a> and alerts you to new questions in selected tags.
    <br/>
    <br/>
    See the code <a href="https://glitch.com/edit/#!/{{{project}}}">on glitch</a> or <a href="https://github.com/captncraig/stackWatch">github</a> 
    <h3>These tags are not the ones I want!</h3>
    Probably not. You can make your own copy of this site though. It's hosted on <a href="glitch.com">glitch.</a>. Just press the "remix" button below to make your own.
    <h3>How can I customize it?</h3>
    After remixing, edit <pre>.env</pre> with these values:
    <pre>
      TAGS="my,tags,comma,seperated"
      # site (protocol and url, no trailing slash)
      SITE="https://serverfault.com"
      # site id from websocket connection (I get from chrome debugger network tab, or from "view source" on the site I want)
      SITE_ID=2
    </pre>
    <h3>How do I update my remixed copy?</h3>
    My source is <a href="https://github.com/captncraig/stackWatch">on github.</a> You should be able to "import from github" on glitch from "captncraig/stackWatch".
    <hr/>
    <a href="https://glitch.com/edit/#!/remix/astonishing-riddle" target="_blank">
       <img src="https://cdn.gomix.com/2bdfb3f8-05ef-4035-a06e-2043962a3a13%2Fremix-button.svg" alt="Remix on Glitch" width="162">
    </a>
    <hr/>
</body>
</html>